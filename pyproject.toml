[project]
name = "moon-robot"
version = "0.1.0"
description = "API for controlling a robot on the Moon"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "asyncpg>=0.30.0",
    "fastapi>=0.116.1",
    "greenlet>=3.2.3",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "sqlalchemy>=2.0.42",
    "uvicorn>=0.35.0",
]

[dependency-groups]
dev = [
    "factory-boy>=3.0.0",
    "httpx>=0.27.0",
    "mypy>=1.0.0",
    "pre-commit>=4.2.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.3.0",
]

[tool.ruff]
target-version = "py311"
exclude = [".git", ".venv", "__pycache__", "build", "dist"]
# Same as Black.
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "RUF", "B", "C4", "SIM", "RET", "TID", "PTH"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
preview = true

[tool.mypy]
files = ["src/robot"]
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
mypy_path = ["src"]
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_missing_imports = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
